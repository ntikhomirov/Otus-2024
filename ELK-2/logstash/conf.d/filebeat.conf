input {
  beats {
    port => 5044
  }
}

filter {
  # Определение типов логов на основе их содержимого или тегов
  if [log][file][path] =~ "access\.log" {
    # Пример grok-фильтра для Apache или Nginx access логов
    grok {
      match => { "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth}
\[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)" }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }
  else if [log][file][path] =~ "error\.log" {
    # Пример grok-фильтра для логов ошибок
    grok {
      match => { "message" => "
\[%{HTTPDATE:timestamp}\]
\[%{LOGLEVEL:loglevel}\] %{GREEDYDATA:error_message}" }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }
  else {
    # Общий фильтр для других типов логов
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message_remainder}" }
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "logstash-%{+YYYY.MM.dd}"
    ssl => true
    ssl_certificate_verification => false
    user => ""
    password => ""
    ilm_enabled => true
    ilm_rollover_alias => "logstash-alias"
    ilm_policy => "my_ilm_policy"
    manage_template => false

    # Если нужно использовать собственный шаблон индекса
    # index => "parsed-logs-%{+YYYY.MM.dd}"
  }

  # Для отладки можно раскомментировать следующие строки
  # stdout {
  #   codec => rubydebug
  # }
}
